/////                                                  \\\\\
///// string selector                                  \\\\\
/////                                                  \\\\\

OUTER_SET string_attack      = 10348
OUTER_SET string_berserk     = 14036
OUTER_SET string_blinded     = 14674
OUTER_SET string_charmed     = 14672
OUTER_SET string_confused    = 14782
OUTER_SET string_crawler     = 9360
OUTER_SET string_cursed      = 17426
OUTER_SET string_dcharmed    = 14780
OUTER_SET string_deafness    = 14073
OUTER_SET string_dexmod      = 14024
OUTER_SET string_dispel      = 14056
OUTER_SET string_ghast       = 9348
OUTER_SET string_gspider     = 6410
OUTER_SET string_hasted      = 14023
OUTER_SET string_healed      = 14022
OUTER_SET string_held        = 14102
OUTER_SET string_intoxicated = 17396
OUTER_SET string_mf_panic    = 20568
OUTER_SET string_ogre        = 6313
OUTER_SET string_panic       = 17427
OUTER_SET string_paralyzed   = 14650
OUTER_SET string_poison      = 14017
OUTER_SET string_poisoned    = 14662
OUTER_SET string_pspider     = 9369
OUTER_SET string_rthinking   = 14791
OUTER_SET string_silence     = 14002
OUTER_SET string_silenced    = 14676
OUTER_SET string_skelly      = 8765
OUTER_SET string_sleep       = 14001
OUTER_SET string_slow        = 14000
OUTER_SET string_slowed      = 14668
OUTER_SET string_stun        = 14043
OUTER_SET string_uncon       = 20438
OUTER_SET string_wwolf       = 8774


ACTION_IF GAME_IS ~bgee~ BEGIN

  OUTER_SET string_diseased    = 31238
  OUTER_SET string_dominated   = 26206
  OUTER_SET string_entangled   = 25144
  OUTER_SET string_goblin      = 27641
  OUTER_SET string_ineffective = 24534
  OUTER_SET string_shadow      = 25764
  OUTER_SET string_stricken    = 26453
  OUTER_SET string_stunned     = 26050
  OUTER_SET string_troll       = 25772

END ELSE BEGIN

  OUTER_SET string_diseased    = 54337
  OUTER_SET string_dominated   = 8364
  OUTER_SET string_entangled   = 47835
  OUTER_SET string_goblin      = 2511
  OUTER_SET string_ineffective = 4742
  OUTER_SET string_shadow      = 3080
  OUTER_SET string_stricken    = 39752
  OUTER_SET string_stunned     = 1280
  OUTER_SET string_troll       = 3008

END

/////                                                  \\\\\
///// adding animations for ee games                   \\\\\
/////                                                  \\\\\

DEFINE_ACTION_FUNCTION cd_animation
  STR_VAR
    code = ""
  BEGIN
  
  ACTION_IF ee_game BEGIN

    ACTION_BASH_FOR ~iwdification/animations/%code%~ ~^.+\..+$~ BEGIN

      ACTION_IF !FILE_EXISTS_IN_GAME ~%BASH_FOR_FILE%~ BEGIN

        COPY ~%BASH_FOR_FILESPEC%~ ~override~

      END

    END
  
  END

END
/*
  LAF cd_animation STR_VAR code = 7203 END // 29187 MBER_PO bear_polar
  LAF cd_animation STR_VAR code = 7320 END // 29472 MAIR elemental_air
  LAF cd_animation STR_VAR code = 7a00 END // 31232 MSPI_GI spider_giant
  LAF cd_animation STR_VAR code = 7a02 END // 31234 MSPI_PH spider_phase
  LAF cd_animation STR_VAR code = 7b03 END // 31491 MWLF_WI wolf_winter
  LAF cd_animation STR_VAR code = 9000 END // 36864 MOGR ogre
  LAF cd_animation STR_VAR code = a100 END // 41216 MCAR carrion_crawler

  LAF cd_animation STR_VAR code = 6403 END // 25603 MSKL skeleton
  LAF cd_animation STR_VAR code = 7302 END // 29442 MEAE_SH shambling_mound
  LAF cd_animation STR_VAR code = e070 END // 57456 MMIN minotaur - MMIN doubles with bg2 mindflayer
  LAF cd_animation STR_VAR code = e0b0 END // 57520 MTRO troll_blue - MTRO doubles with bg2 troll
  LAF cd_animation STR_VAR code = e0d0 END // 57552 MUMB umber_hulk_elder - MUMB doubles with bg2 umber hulk
  LAF cd_animation STR_VAR code = e220 END // 57888 MBBM beetle_black
  LAF cd_animation STR_VAR code = e24b END // 57931 MELE elemental_earth_iwd
  LAF cd_animation STR_VAR code = e24c END // 57932 MELF elemental_fire_iwd
  LAF cd_animation STR_VAR code = e24d END // 57933 MELW elemental_water
  LAF cd_animation STR_VAR code = e25d END // 57949 MYET tundra_yeti
  LAF cd_animation STR_VAR code = e300 END // 58112 MGHO ghost
  LAF cd_animation STR_VAR code = e320 END // 58144 MGH3 ghast_greater
  LAF cd_animation STR_VAR code = e400 END // 58368 MGO1 goblin_axe
  LAF cd_animation STR_VAR code = e420 END // 58400 MGO3 goblin_elite_axe
  LAF cd_animation STR_VAR code = e500 END // 58624 MLIZ lizard_man_elite
  LAF cd_animation STR_VAR code = e510 END // 58640 MLI2 lizard_man
  LAF cd_animation STR_VAR code = e900 END // 59648 MSAL salamander_fire
  LAF cd_animation STR_VAR code = e910 END // 59664 MSA2 salamander_frost
  LAF cd_animation STR_VAR code = ea20 END // 59936 MSH2 shadow_large
  LAF cd_animation STR_VAR code = eb20 END // 60192 MSKB skeleton_fiend
  LAF cd_animation STR_VAR code = ee00 END // 60928 MZO2 zombie_yellow
*/

/////                                                  \\\\\
///// adding portrait icons                            \\\\\
/////                                                  \\\\\

DEFINE_ACTION_FUNCTION cd_new_portrait_icon
  INT_VAR string = 0
  STR_VAR bam_file = "****"
  RET     icon
  BEGIN

  OUTER_SET icon = "-1"

  ACTION_IF ee_game BEGIN

    COPY_EXISTING ~statdesc.2da~ ~override~
      COUNT_2DA_ROWS 3 count
      READ_2DA_ENTRY (count - 1) 0 3 icon
      SET icon += 1
  
    APPEND ~statdesc.2da~ ~%icon% %string% %bam_file%~

  END ELSE BEGIN

    COPY_EXISTING ~statdesc.2da~ ~override~
      COUNT_2DA_ROWS 2 count
      READ_2DA_ENTRY (count - 1) 0 2 icon
      SET icon += 1
  
    APPEND ~statdesc.2da~ ~%icon% %string%~
  END	

END

/////                                                  \\\\\
///// adding summons tables                            \\\\\
/////                                                  \\\\\

DEFINE_ACTION_FUNCTION cd_new_summon_table
  STR_VAR descript = "foo"
          2da_file = "foo"
  RET     table
  BEGIN

  OUTER_SET table = "-1"
  
  ACTION_IF ee_game BEGIN

    COPY_EXISTING ~smtables.2da~ ~override~
      COUNT_2DA_ROWS 2 count
      READ_2DA_ENTRY (count - 1) 0 2 table
      INNER_PATCH_SAVE table ~%table%~ BEGIN
        REPLACE_TEXTUALLY ~^\([0-9]+\).+$~ ~\1~
      END
      SET table += 1
  
    APPEND ~smtables.2da~ ~%table%_%descript% %2da_file%~
  
  END

END

/////                                                  \\\\\
///// scroll making made easy                          \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION cd_scroll
  INT_VAR
    unusable0  = 0
    unusable1  = 0
    unusable2  = 0
    target_hdr = 1
    range      = 30
    opcode     = 146
    target_eff = 2
    price = 54321
  STR_VAR 
    spell = cdnull
	icon  = EVAL "%DEST_RES%"
  BEGIN

  WRITE_LONG  0x1e (THIS | unusable0) // class/alignment flags
  WRITE_BYTE  0x2d (THIS | unusable1) // add first set of unusable flags
  WRITE_BYTE  0x2f (THIS | unusable2) // add second set of unusable flags
  WRITE_LONG  0x34 price              // price of scroll
  WRITE_BYTE  0x7e target_hdr         // target: any point
  WRITE_SHORT 0x80 range              // range

  WRITE_ASCIIE 0x3a "%icon%"
  WRITE_ASCII  0x41 a #1
  WRITE_ASCIIE 0x76 "%icon%"
  WRITE_ASCII  0x7d a #1
  PATCH_IF (SOURCE_SIZE > 0xda) BEGIN // only for arcane scrolls that have second header for learning
    WRITE_SHORT  0xe2 opcode          // cast-at-point opcode
    WRITE_BYTE   0xe4 target_eff      // target: self
    WRITE_ASCIIE 0xae "%icon%"
    WRITE_ASCII  0xb5 a #1
    WRITE_ASCIIE 0xf6 "%spell%" #8
    WRITE_ASCIIE 0x126 "%spell%" #8
  END ELSE BEGIN                      // divine scroll
    WRITE_SHORT  0xaa opcode          // cast-at-point opcode
    WRITE_BYTE   0xac target_eff      // target: self
    WRITE_ASCIIE 0xbe "%spell%" #8
  END

END

/////                                                  \\\\\
///// simulate cloud projectiles for vanilla           \\\\\
/////                                                  \\\\\

/*
Original idea from DavidW for IWD-in-BG2. Basic idea: cloud spells summon an invisible creature, fooM. In turn
fooM runs cycles of spawning several fooV, who teleport a short distance away, play a visual, and then disappear.
fooM also repeatedly casts the actual working spell (with an invisible AoE projectile) to do the work. The working 
spell also includes a one-round 206 against itself to prevent applying effects to targets more than once a round.

Visual randomness is achieved by fooV using teleport field to jump away from fooM at the center of the cloud, and
then randomly playing one of the VVCs available. Functionality is achieved by fooM casting the working spell.

If the spell should be cleared out from Zone of Sweet Air, additional steps are taken. Any spell that provides a 
ZoSA effect is patched to set a global, CDIZOSA. All of the invisible cloud creatures destroy themselves if this 
variable gets set, and then the main baldur game script resets the variable after a round.

EEs are so, so, SO much easier here. Thanks Laszlo!
*/

DEFINE_ACTION_FUNCTION cd_create_cloud 
  INT_VAR cloud_dur = 6 
          visloop = 5 
          zosa = 0 
  STR_VAR code = null
          anim = null
BEGIN

  ACTION_IF ("%anim%" STRING_COMPARE_CASE "null" = 0) BEGIN
    
    OUTER_SPRINT anim ~%code%V~
    
  END

  COPY ~iwdification/eff/cloud.eff~ ~override/%code%.eff~
    WRITE_ASCIIE 0x30 ~%code%M~

  COPY ~iwdification/cre/cloud.cre~ ~override/%code%M.cre~
       ~iwdification/cre/cloud.cre~ ~override/%code%V.cre~
    WRITE_ASCIIE 0x248 ~%DEST_RES%~
    WRITE_ASCIIE 0x280 ~%DEST_RES%~

  EXTEND_TOP ~%code%M.bcs~ ~iwdification/baf/cloudmn.baf~ EVALUATE_BUFFER
  EXTEND_TOP ~%code%V.bcs~ ~iwdification/baf/cloudvs.baf~ EVALUATE_BUFFER
  
  ACTION_IF zosa BEGIN
  
    ACTION_IF NOT FILE_EXISTS ~iwdification/baf/cdzosa.baf~ THEN BEGIN // run only once across both components
  
      COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
        LPF CLONE_EFFECT INT_VAR silent = 1 match_opcode = 273 opcode = 265 parameter1 = 1 timing = 1 STR_VAR resource = cdizosa END
        BUT_ONLY
      
      COPY ~iwdification/baf/zosa.baf~ ~iwdification/baf/cdzosa.baf~

      ACTION_FOR_EACH file IN baldur baldur25 BEGIN
    
        ACTION_IF FILE_EXISTS_IN_GAME ~%file%.bcs~ THEN BEGIN
    
          EXTEND_BOTTOM ~%file%.bcs~ ~iwdification/baf/baldur.baf~
          
        END
      
      END
      
    END

    EXTEND_TOP ~%code%M.bcs~ ~iwdification/baf/cdzosa.baf~
    EXTEND_TOP ~%code%V.bcs~ ~iwdification/baf/cdzosa.baf~

  END

  ACTION_IF NOT FILE_EXISTS_IN_GAME cdiclout.spl THEN BEGIN
    COPY ~iwdification/spl/cdiclout.spl~ ~override~ // minions jump away
  END

  COPY ~iwdification/spl/cloudv.spl~ ~override/%code%v.spl~
    SET step = (100 / (visloop + 1))
    LPF ADD_SPELL_EFFECT INT_VAR opcode = 215 target = 1 parameter2 = 2 probability1 = step STR_VAR resource = EVALUATE_BUFFER ~%code%0~ END
    FOR (index = 1 ; index <= visloop ; ++index) BEGIN
      READ_BYTE 0xac temp_prob
      LPF ADD_SPELL_EFFECT INT_VAR insert_point = 0 opcode = 215 target = 1 parameter2 = 2 
        probability2 = (temp_prob + 1) probability1 = (temp_prob + step) STR_VAR resource = EVALUATE_BUFFER ~%code%%index%~ END
    END
    WRITE_BYTE 0xac 100

  OUTER_FOR (index = 0 ; index <= visloop ; ++index) BEGIN
    COPY ~iwdification/vvc/%code%%index%.vvc~ ~override~
      WRITE_ASCIIE 0x08 ~%anim%~
  END
//  COPY ~iwdification/bam/%anim%.bam~ ~override~

END

/////                                                  \\\\\
///// bastardized handle_audio variant                 \\\\\
/////                                                  \\\\\

// I just made some changes because I want WeiDU to convert (or rename) ogg > wav once, and then leave the resulting wav files to
// be copied (or not) by the respective components. Basically anything tha moves or copies the files has been removed, so that
// WeiDU won't remove the wav files if the component that invoked this function gets uninstalled. 

DEFINE_ACTION_FUNCTION CD_HANDLE_AUDIO
  INT_VAR
    music = 0
  STR_VAR
    audio_path  = ~iwdification/wav~
    oggdec_path = ~iwdification/wav~
    sox_path    = ~iwdification/wav~
    output_path = ~iwdification/wav~
BEGIN
  /* Early versions of BG:EE do not include bgee.lua and
   * PST:EE does not include monkfist.2da
   */
  ACTION_IF !ee_game
  BEGIN
    ACTION_MATCH "%WEIDU_OS%" WITH
      win32
      BEGIN
        ACTION_IF FILE_EXISTS "%oggdec_path%/oggdec.exe" BEGIN
          ACTION_BASH_FOR ~%audio_path%~ ~.+\.ogg$~ BEGIN
//            OUTER_SPRINT wavfile ~%audio_path%/%BASH_FOR_RES%.wav~
//            COPY ~.../fl#inlined/null.file~ ~%wavfile%~
            AT_NOW ~%oggdec_path%/oggdec.exe "%BASH_FOR_FILESPEC%"~
//            MOVE ~%wavfile%~ ~%output_path%~
          END
        END ELSE BEGIN
          WARN ~WARNING: audio was not installed because oggdec.exe could not be found in %oggdec_path%~
        END
      END

      osx
      BEGIN
        ACTION_IF FILE_EXISTS ~%sox_path%/sox~ BEGIN
          AT_NOW ~chmod +x '%sox_path%/sox'~
          ACTION_BASH_FOR ~%audio_path%~ ~.+\.ogg$~ BEGIN
            OUTER_SPRINT wavfile ~%audio_path%/%BASH_FOR_RES%.wav~
//            COPY ~.../fl#inlined/null.file~ ~%wavfile%~
            AT_NOW ~'%sox_path%/sox' '%BASH_FOR_FILESPEC%' '%wavfile%'~
//            MOVE ~%wavfile%~ ~%output_path%~
          END
        END ELSE BEGIN
          WARN ~WARNING: audio was not installed because sox could not be found in %sox_path%~
        END
      END

      unix
      BEGIN
        OUTER_SET installed = 1
        ACTION_BASH_FOR ~%audio_path%~ ~.+\.ogg$~ BEGIN
          OUTER_SPRINT wavfile ~%audio_path%/%BASH_FOR_RES%.wav~
//          COPY ~.../fl#inlined/null.file~ ~%wavfile%~
          AT_NOW ~oggdec '%BASH_FOR_FILESPEC%'~
          ACTION_IF FILE_EXISTS ~%wavfile%~ AND !FILE_SIZE ~%wavfile%~ 0 BEGIN
//            MOVE ~%wavfile%~ ~%output_path%~
          END ELSE OUTER_SET installed = 0
        END
        ACTION_IF !installed BEGIN
          WARN "WARNING: audio was not installed because WAV files were not found. Are you sure you have oggdec installed?"
        END
      END
      DEFAULT
    END
  END ELSE BEGIN
    ACTION_IF !music BEGIN
      OUTER_SPRINT ext "wav"
    END ELSE BEGIN
      OUTER_SPRINT ext "acm"
    END
    ACTION_BASH_FOR ~%audio_path%~ ~.+\.ogg$~ BEGIN
      COPY_LARGE + ~%BASH_FOR_FILESPEC%~ ~%output_path%/%BASH_FOR_RES%.%ext%~
    END
  END
END

/////                                                  \\\\\
///// CD_SPLIT_SAVE_DAMAGE                             \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION CD_SPLIT_SAVE_DAMAGE // turns damage using ee's save-for-half bit into two damage opcodes

  // defines what we're going to check
  INT_VAR header               = "-1"
          header_type          = "-1"
          m_power              = "-1"
          m_type               = "-1"
          m_damtype            = "-1"
          m_timing             = "-1"
          m_dispel             = "-1"
          m_duration           = "-1"
          m_prob1              = "-1"
          m_prob2              = "-1"
          m_dicesize           = "-1"
          m_flags              = "-1"
BEGIN

  READ_ASCII 0x00 sig (3)
  SET abil_length = 0x28
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "ITM" = 0) BEGIN
    SET abil_length = 0x38
  END
  READ_LONG  0x64 abil_off ELSE 0
  READ_SHORT 0x68 abil_num ELSE 0
  READ_LONG  0x6a fx_off   ELSE 0
  SET fx_delta = 0
  FOR (index = 0 ; index < abil_num ; ++index) BEGIN // start iterating through abilities
    WRITE_SHORT (abil_off + 0x20 + (abil_length * index)) (THIS + fx_delta)
    READ_SHORT  (abil_off +        (abil_length * index)) o_header_type
    PATCH_IF (((header      = index)         OR (header      < 0)) AND
              ((header_type = o_header_type) OR (header_type < 0))) BEGIN
      READ_SHORT  (abil_off + 0x1e + (abil_length * index)) abil_fx_num
      READ_SHORT  (abil_off + 0x20 + (abil_length * index)) abil_fx_idx
      FOR (index2 = 0 ; index2 < abil_fx_num ; ++index2) BEGIN
        READ_SHORT (fx_off +        (0x30 * (abil_fx_idx + index2))) opcode
        READ_LONG  (fx_off + 0x2c + (0x30 * (abil_fx_idx + index2))) o_flags
        PATCH_IF (((opcode = 12) AND (o_flags & BIT8) = BIT8)) BEGIN
          READ_BYTE  (fx_off + 0x02 + (0x30 * (abil_fx_idx + index2))) o_power
          READ_LONG  (fx_off + 0x04 + (0x30 * (abil_fx_idx + index2))) o_amount
          READ_SHORT (fx_off + 0x08 + (0x30 * (abil_fx_idx + index2))) o_type
          READ_SHORT (fx_off + 0x0a + (0x30 * (abil_fx_idx + index2))) o_damtype
          READ_BYTE  (fx_off + 0x0c + (0x30 * (abil_fx_idx + index2))) o_timing
          READ_BYTE  (fx_off + 0x0d + (0x30 * (abil_fx_idx + index2))) o_dispel
          READ_LONG  (fx_off + 0x0e + (0x30 * (abil_fx_idx + index2))) o_duration
          READ_BYTE  (fx_off + 0x12 + (0x30 * (abil_fx_idx + index2))) o_prob1
          READ_BYTE  (fx_off + 0x13 + (0x30 * (abil_fx_idx + index2))) o_prob2
          READ_LONG  (fx_off + 0x1c + (0x30 * (abil_fx_idx + index2))) o_dicenum
          READ_LONG  (fx_off + 0x20 + (0x30 * (abil_fx_idx + index2))) o_dicesize
          READ_LONG  (fx_off + 0x24 + (0x30 * (abil_fx_idx + index2))) o_save
          READ_LONG  (fx_off + 0x28 + (0x30 * (abil_fx_idx + index2))) o_savebonus
//          READ_LONG  (fx_off + 0x2c + (0x30 * (abil_fx_idx + index2))) o_flags
          PATCH_IF (((o_power     = m_power)     OR (m_power     < 0)) AND
                    ((o_type      = m_type)      OR (m_type      < 0)) AND
                    ((o_damtype   = m_damtype)   OR (m_damtype   < 0)) AND
                    ((o_timing    = m_timing)    OR (m_timing    < 0)) AND
                    ((o_dispel    = m_dispel)    OR (m_dispel    < 0)) AND
                    ((o_duration  = m_duration)  OR (m_duration  < 0)) AND
                    ((o_prob1     = m_prob1)     OR (m_prob1     < 0)) AND
                    ((o_prob2     = m_prob2)     OR (m_prob2     < 0)) AND
                    ((o_dicesize  = m_dicesize)  OR (m_dicesize  < 0)) AND
                    ((o_flags     = m_flags)     OR (m_flags     < 0))) BEGIN
            WRITE_LONG   (fx_off + 0x2c + (0x30 * (abil_fx_idx + index2))) (THIS BAND `BIT8) // remove save-for-half flag
            READ_ASCII   (fx_off +        (0x30 * (abil_fx_idx + index2))) clone (48) // read info for new effect
            INSERT_BYTES (fx_off +        (0x30 * (abil_fx_idx + index2))) 0x30       // insert new effect
            WRITE_ASCIIE (fx_off +        (0x30 * (abil_fx_idx + index2))) ~%clone%~  // copy existing effect into new bytes
            WRITE_LONG   (fx_off + 0x04 + (0x30 * (abil_fx_idx + index2))) ((o_amount + 1) / 2)  // set original damage to half
            WRITE_LONG   (fx_off + 0x1c + (0x30 * (abil_fx_idx + index2))) ((o_dicenum + 0) / 2)
            WRITE_LONG   (fx_off + 0x34 + (0x30 * (abil_fx_idx + index2))) ((o_amount + 0) / 2)  // set new damage to half
            WRITE_LONG   (fx_off + 0x4c + (0x30 * (abil_fx_idx + index2))) ((o_dicenum + 1) / 2) // +1 is fudge factor for rounding odd numbers
            WRITE_LONG   (fx_off + 0x24 + (0x30 * (abil_fx_idx + index2))) (((((THIS BAND `BIT0) BAND `BIT1) BAND `BIT2) BAND `BIT3) BAND `BIT4) // remove save flags from new effect
//            WRITE_LONG   (fx_off + 0x24 + (0x30 * (abil_fx_idx + index2))) ((THIS BAND `(BIT0 + BIT1 + BIT2 + BIT3 + BIT4)) // remove save flags from new effect
            SET index2      += 1
            SET fx_delta    += 1
            SET abil_fx_num += 1
          END // param check
        END // damage, flag check
      END // abil fx loop
      WRITE_SHORT  (abil_off + 0x1e + (abil_length * index)) abil_fx_num
    END // abil type check
  END // abil loop

END

/////                                                  \\\\\
///// CD_CONVERT_333                                   \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION CD_CONVERT_333 

  STR_VAR 333spell = ""

BEGIN // converts recurring 333s to simple 146s

  READ_ASCII 0x00 sig (3)
  SET abil_length = 0x28
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "ITM" = 0) BEGIN
    SET abil_length = 0x38
  END
  READ_LONG  0x64 abil_off ELSE 0
  READ_SHORT 0x68 abil_num ELSE 0
  READ_LONG  0x6a fx_off   ELSE 0
  SET fx_delta = 0
  FOR (index = 0 ; index < abil_num ; ++index) BEGIN // start iterating through abilities
    WRITE_SHORT (abil_off + 0x20 + (abil_length * index)) (THIS + fx_delta)
    READ_SHORT  (abil_off + 0x1e + (abil_length * index)) abil_fx_num
    READ_SHORT  (abil_off + 0x20 + (abil_length * index)) abil_fx_idx
    FOR (index2 = 0 ; index2 < abil_fx_num ; ++index2) BEGIN
      READ_SHORT (fx_off +        (0x30 * (abil_fx_idx + index2))) opcode
      PATCH_IF opcode = 333 BEGIN
        PATCH_IF ("%333spell%" STRING_COMPARE_CASE "" = 0) BEGIN
          READ_ASCII  (fx_off + 0x14 + (0x30 * (abil_fx_idx + index2))) resref
          PATCH_IF ("%resref%" STRING_COMPARE_CASE "" = 0) BEGIN
            SPRINT 333spell "%SOURCE_RES%b"
          END ELSE BEGIN
            SPRINT 333spell "%resref%b"
          END
        END
        READ_LONG    (fx_off + 0x2c + (0x30 * (abil_fx_idx + index2))) delay
        PATCH_IF !delay BEGIN SET delay = 6 END // if delay is 0, use default 6 instead
        READ_LONG    (fx_off + 0x04 + (0x30 * (abil_fx_idx + index2))) times
        READ_LONG    (fx_off + 0x08 + (0x30 * (abil_fx_idx + index2))) level
        WRITE_SHORT  (fx_off +        (0x30 * (abil_fx_idx + index2))) 146                   // opcode
        WRITE_LONG   (fx_off + 0x04 + (0x30 * (abil_fx_idx + index2))) level                 // cast at level
        WRITE_LONG   (fx_off + 0x08 + (0x30 * (abil_fx_idx + index2))) 1                     // cast instantly
        WRITE_BYTE   (fx_off + 0x0c + (0x30 * (abil_fx_idx + index2))) 1                     // timing: delay/perm
        WRITE_LONG   (fx_off + 0x0e + (0x30 * (abil_fx_idx + index2))) 0                     // delay
        WRITE_ASCIIE (fx_off + 0x14 + (0x30 * (abil_fx_idx + index2))) ~%333spell%~ #8       // subspell
        READ_ASCII   (fx_off +        (0x30 * (abil_fx_idx + index2))) clone (48)            // read info for new effect(s)
        FOR (index3 = 0 ; index3 < times ; ++index3) BEGIN
          INSERT_BYTES (fx_off +        (0x30 * (abil_fx_idx + index2))) 0x30                   // insert new effect
          WRITE_ASCIIE (fx_off +        (0x30 * (abil_fx_idx + index2))) ~%clone%~              // copy existing effect into new bytes
          WRITE_BYTE   (fx_off + 0x0c + (0x30 * (abil_fx_idx + index2))) 4                      // timing: delay/perm
          WRITE_LONG   (fx_off + 0x0e + (0x30 * (abil_fx_idx + index2))) ((index3 + 1) * delay) // delay
          SET index2      += 1
          SET fx_delta    += 1
          SET abil_fx_num += 1
        END // new fx loop
      END // 333 check
    END // abil fx loop
    WRITE_SHORT  (abil_off + 0x1e + (abil_length * index)) abil_fx_num
  END // abil loop

END

/////                                                  \\\\\
///// CD_CONVERT_9_255                                   \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION CD_CONVERT_9_255 BEGIN

  READ_ASCII 0x00 sig (3)
  SET abil_length = 0x28
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "ITM" = 0) BEGIN
    SET abil_length = 0x38
  END
  READ_LONG  0x64 abil_off ELSE 0
  READ_SHORT 0x68 abil_num ELSE 0
  READ_LONG  0x6a fx_off   ELSE 0
  SET fx_delta = 0
  FOR (index = 0 ; index < abil_num ; ++index) BEGIN // start iterating through abilities
    WRITE_SHORT (abil_off + 0x20 + (abil_length * index)) (THIS + fx_delta)
    READ_SHORT  (abil_off + 0x1e + (abil_length * index)) abil_fx_num
    READ_SHORT  (abil_off + 0x20 + (abil_length * index)) abil_fx_idx
    FOR (index2 = 0 ; index2 < abil_fx_num ; ++index2) BEGIN
      READ_SHORT (fx_off +        (0x30 * (abil_fx_idx + index2))) opcode
      PATCH_IF ((opcode = 8) OR (opcode = 9)) BEGIN
        READ_SHORT (fx_off + 0x08 + (0x30 * (abil_fx_idx + index2))) loc
        PATCH_IF loc = 255 BEGIN
          WRITE_SHORT (fx_off + 0x08 + (0x30 * (abil_fx_idx + index2))) 6
          READ_ASCII (fx_off +        (0x30 * (abil_fx_idx + index2))) clone (48)
          FOR (index3 = 0 ; index3 < 6 ; ++index3) BEGIN
            INSERT_BYTES (fx_off +        (0x30 * (abil_fx_idx + index2))) 0x30
            WRITE_ASCIIE (fx_off +        (0x30 * (abil_fx_idx + index2))) ~%clone%~
            WRITE_SHORT  (fx_off + 0x08 + (0x30 * (abil_fx_idx + index2))) index3
          END
          SET fx_delta += 6
          SET index2 += 6
          SET abil_fx_num += 6
        END
      END
    END
    WRITE_SHORT  (abil_off + 0x1e + (abil_length * index)) abil_fx_num
  END

END

/////                                                  \\\\\
///// CD_EXTEND-O-MATIC, patent pending                \\\\\
/////                                                  \\\\\

// this function creates headers and does basic duration extensions to level 30; written for inwd-in-bg2 ages ago
DEFINE_PATCH_FUNCTION CD_EXTEND-O-MATIC
  INT_VAR base_dur    =  0 // constant to add to all durations
          step_dur    =  6 // how much duration to add to each consecutive header
          step_size   =  1 // how many levels between headers
          level_cap   = 20 // stop extending at level
          min_dur     =  4 // ignore effects with durations less than this (e.g. cosmetics)
          dur_special =  0 // just add step_dur to existing effects (ignore base_dur)
          min_lev_alt =  0 // if extending from level 1, use this value as its minimum level instead (e.g. fifth slevel spell with only one header, use 9 here)
BEGIN

  READ_LONG  0x64 abil_off
  READ_SHORT 0x68 abil_num
  READ_LONG  0x6a fx_off
  READ_SHORT (abil_off + 0x10 + (0x28 * (abil_num - 1))) min_lev // read level of last ability
  PATCH_IF ((min_lev = 1) AND (min_lev_alt != 0)) BEGIN SET min_lev = min_lev_alt END
  FOR (index = min_lev + step_size ; index < (level_cap + 1) ; index = index + step_size) BEGIN
    READ_ASCII (abil_off +        (0x28 * (abil_num - 1))) abil (0x28) // read entire ability
    READ_SHORT (abil_off + 0x1e + (0x28 * (abil_num - 1))) abil_fx_num
    READ_SHORT (abil_off + 0x20 + (0x28 * (abil_num - 1))) abil_fx_idx
    READ_ASCII (fx_off +        (0x30 * abil_fx_idx)) effects (abil_fx_num * 0x30) // read entire fx block
    INSERT_BYTES (fx_off +        (0x30 * (abil_fx_idx + abil_fx_num))) (abil_fx_num * 0x30) // insert bytes for new ability
    WRITE_ASCIIE (fx_off +        (0x30 * (abil_fx_idx + abil_fx_num))) "%effects%"          // write in effects block
    FOR (index2 = 0 ; index2 < abil_fx_num ; ++index2) BEGIN
      READ_LONG (fx_off + 0x0e + (0x30 * (abil_fx_idx + abil_fx_num + index2))) duration
      PATCH_IF (duration > min_dur) BEGIN // exclude instant/cosmetic efects
        PATCH_IF dur_special = 1 BEGIN
          SET new_dur = duration + step_dur
        END ELSE BEGIN
          SET new_dur = (base_dur + (index * step_dur))
        END
        WRITE_LONG (fx_off + 0x0e + (0x30 * (abil_fx_idx + abil_fx_num + index2))) new_dur // adjust durations
      END
    END
    INSERT_BYTES (abil_off +        (0x28 * abil_num)) 0x28 // insert new ability
    WRITE_ASCIIE (abil_off +        (0x28 * abil_num)) "%abil%"
    WRITE_SHORT  (abil_off + 0x10 + (0x28 * abil_num)) index
    WRITE_SHORT  (abil_off + 0x20 + (0x28 * abil_num)) (abil_fx_idx + abil_fx_num)
    SET abil_num += 1
    SET fx_off   += 0x28
  END
  WRITE_SHORT 0x68 abil_num
  WRITE_LONG  0x6a fx_off

END